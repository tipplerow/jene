
package jene.neo;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import jam.app.JamApp;
import jam.app.JamLogger;
import jam.app.JamProperties;
import jam.io.Delimiter;
import jam.lang.JamException;
import jam.math.IntUtil;
import jam.util.StreamUtil;

import jene.ensembl.EnsemblProteinDb;
import jene.hugo.HugoMaster;
import jene.hugo.HugoSymbol;
import jene.maf.MAFProperties;
import jene.missense.MissenseGroup;
import jene.missense.MissenseTable;
import jene.tcga.CellFraction;
import jene.tcga.TumorBarcode;

/**
 * Processes MAF files and resolves the self/neo-peptide pairs
 * generated by missense mutations.
 */
public final class PeptidePairProcessor extends JamApp {
    private final String mafFile;
    private final String reportFile;
    private final CellFraction ccfThreshold;

    private final int[] peptideLengths;

    private MissenseTable missenseTable;
    private List<MissenseGroup> missenseGroups;
    private List<PeptidePairRecord> peptidePairRecords;

    private PeptidePairProcessor(String... propFiles) {
        super(propFiles);

        this.mafFile = MAFProperties.resolveMAFFile();
        this.reportFile = JamProperties.getRequired(OUTPUT_FILE_PROPERTY);
        this.ccfThreshold = MAFProperties.resolveCCFThreshold();
        this.peptideLengths = IntUtil.parseIntArray(JamProperties.getRequired(PEPTIDE_LENGTHS_PROPERTY), Delimiter.COMMA);
    }

    /**
     * Name of the system property that specifies the base name of the
     * output file.
     */
    public static final String OUTPUT_FILE_PROPERTY = "jene.neo.PeptidePairProcessor.reportFile";

    /**
     * Name of the system property that specifies the lengths of the
     * peptide fragments to generate. The lengths should be given in
     * an array: {@code jene.neo.peptideLengths = 9, 10}.
     */
    public static final String PEPTIDE_LENGTHS_PROPERTY = "jene.neo.PeptidePairProcessor.peptideLengths";

    /**
     * Processes a MAF file and resolves the self/neo-peptide pairs
     * generated by missense mutations.
     *
     * @param propFiles files containing the system properties that
     * define the runtime environment.
     *
     * @throws RuntimeException if any errors occur.
     */
    public static void run(String... propFiles) {
        PeptidePairProcessor processor = new PeptidePairProcessor(propFiles);
        processor.run();
    }

    private void run() {
        writeRuntimeEnv("JAM_", "JENE_");
        writeRuntimeProperties("jam.", "jene.");

        initializeEngine();
        loadMissenseTable();
        processMissenseGroups();

        JamLogger.info("DONE!");
    }

    private void initializeEngine() {
        HugoMaster hugoMaster = HugoMaster.global();
        EnsemblProteinDb ensemblDb = EnsemblProteinDb.reference();

        PeptidePairEngine.initialize(hugoMaster, ensemblDb);
    }

    private void loadMissenseTable() {
        missenseTable = MissenseTable.load(mafFile, ccfThreshold);
        missenseGroups = missenseTable.group();
    }

    private void processMissenseGroups() {
        /*
        List<List<PeptidePairRecord>> engineOutput =
            StreamUtil.applyParallel(missenseGroups, group -> PeptidePairEngine.generate(group, peptideLengths));

        System.out.println(engineOutput);
        */
    }
    /*
    private void processBarcodes() {
        barcodes.parallelStream().forEach(barcode -> processBarcode(barcode));
    }

    private void processBarcode(TumorBarcode barcode) {
        ++processed;
        JamLogger.info("Processing barcode [%s] (%d of %d)...", barcode.getKey(), processed, barcodes.size());

        Set<HugoSymbol> hugoSymbols = table.viewSymbols(barcode);
        List<MAFFastaRecord> fastaRecords = new ArrayList<MAFFastaRecord>();

        for (HugoSymbol symbol : hugoSymbols) {
            MAFFastaRecord fastaRecord = processGene(barcode, symbol);

            if (fastaRecord != null)
                fastaRecords.add(fastaRecord);
        }

        if (!fastaRecords.isEmpty())
            manager.store(barcode, fastaRecords);
    }

    private MAFFastaRecord processGene(TumorBarcode barcode, HugoSymbol symbol) {
        MissenseProcessor processor =
            new MissenseProcessor(barcode, symbol, ccfThreshold, table, hugoMaster, ensemblDb);

        try {
            return processor.process();
        }
        catch (Exception ex) {
            String message =
                String.format("Error creating FASTA record [%s:%s]: %s",
                              barcode.getKey(), symbol.getKey(), ex.getMessage());
            
            JamLogger.warn(message);
            JamException.log(message);

            return null;
        }
    }
    */
    private static void usage() {
        System.err.println("Usage: jam.neo.PeptidePairProcessor PROP_FILE1 [PROP_FILE2 ...]");
        System.exit(1);
    }

    public static void main(String[] args) {
        if (args.length < 1)
            usage();

        run(args);
    }
}
